/* FIRST APPROACH-COMPUTEPARITY BASED ON CLEARING SETBIT*/
import java.io.*;
import java.util.*;
import java.util.Scanner;
public class parity{
    public static short parity(long  x) 
    {
       short result=0;
        while(x!=0)
        {
            result^=1;
            x&=(x-1);
        }
        return result;
    }
    public static void main(String args[])
	{
		int x;
	    Scanner obj=new Scanner(System.in);
	     x = obj.nextInt();
		System.out.println(parity(x));
	}
}


/*BRUTE FORCE APPROACH*/
import java.io.*;
import java.util.*;
import java.util.Scanner;
public class parity{
    public static short parity(long  x) 
    {
       short result=0;
        while(x!=0)
        {
            result^=(x&1);
            x>>>=1;
        }
        return result;
    }
    public static void main(String args[])
	{
		int x;
	    Scanner obj=new Scanner(System.in);
	     x = obj.nextInt();
		System.out.println(parity(x));
	}
}
/* third approach - USING XOR AND SHIFTING OPERATIONS*/
import java.io.*;
import java.util.*;
import java.util.Scanner;
public class parity{
    public static short parity(long  x) 
 {

   x^=x>>>32;
   x^=x>>>16;
   x^=x>>>8;
   x^=x>>>4;
   x^=x>>>2;
   x^=x>>>1;
   return (short) (x & 0x1);
 }
   
    public static void main(String args[])
	{
		int x;
	    Scanner obj=new Scanner(System.in);
	     x = obj.nextInt();
		System.out.println(parity(x));
	}
}
/* 4th approach-CACHING/
import java.util.Arrays;
import java.util.Scanner;

public class ParityOfNumber {
private static short computeParityBasedOnClearingSetBit(long no) {
        int result = 0;
        while (no != 0) {
            no = no & (no - 1);
            result ^= 1;
        }

        return (short) (result & 0x1);
    }

    private static short computeParityWithCaching(long no) {
        int[] cache = new int[(int) Math.pow(2, 16)];
        Arrays.fill(cache, -1);

        int WORD_SIZE = 16;
        int mask = 0xFFFF;

        int masked1 = (int) ((no >>> (3 * WORD_SIZE)) & mask);
        checkAndSetInCache(masked1, cache);

        int masked2 = (int) ((no >>> (2 * WORD_SIZE)) & mask);
        checkAndSetInCache(masked2, cache);

        int masked3 = (int) ((no >>> WORD_SIZE) & mask);
        checkAndSetInCache(masked3, cache);

        int masked4 = (int) (no & mask);
        checkAndSetInCache(masked4, cache);

        int result = (cache[masked1] ^ cache[masked2] ^ cache[masked3] ^ cache[masked4]);
        return (short) (result & 0x1);
    }

    private static void checkAndSetInCache(int val, int[] cache) {
        if(cache[val] < 0) {
            cache[val] = computeParityBasedOnClearingSetBit(val);
        }
}
 public static void main(String[] args) {
        long no = 1274849;
        System.out.println("Binary representation of the number: " + Long.toBinaryString(no));
        System.out.println("Is Parity [computeParityBasedOnClearingSetBit]: " + computeParityBasedOnClearingSetBit(no));
        
        System.out.println("Is Parity [computeParityWithCaching]: " + computeParityWithCaching(no));
    }
}
